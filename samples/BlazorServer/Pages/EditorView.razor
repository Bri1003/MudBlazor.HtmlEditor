<MudStack Justify="Justify.FlexEnd" Row="true">
    <MudButton OnClick="OnCancel" Size="Size.Small">Cancel</MudButton>
    <MudButton OnClick="Reset" Size="Size.Small">Reset</MudButton>
    <MudButton Color="Color.Primary" OnClick="SaveChanges" Size="Size.Small" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled">Save Changes</MudButton>
</MudStack>

<MudHtmlEditor @ref="_editor" InitialHtml="@_html" OnChange="html => _html = html" FileUploadHandler="HandleFileUpload" />

@code {
    private const string _uploadsDirectory = "..\\uploads";

    private MudHtmlEditor _editor = default!;
    private string _html = "";

    [Parameter]
    public string InitialHtml { get; set; } = "";

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<string> OnSave { get; set; }

    protected override void OnParametersSet()
    {
        _html = InitialHtml;
    }

    private async Task<string> HandleFileUpload(MudHtmlEditor editor, ImageUploadEventArgs args)
    {
        if (!Directory.Exists(_uploadsDirectory))
            Directory.CreateDirectory(_uploadsDirectory);

        using var fs = new FileStream(Path.Combine(_uploadsDirectory, args.FileName), FileMode.Create);
        {
            await args.Stream.CopyToAsync(fs);
        }

        return $"uploads/{args.FileName}";
    }

    private async Task Reset()
    {
        await _editor.Reset();
    }

    private async Task SaveChanges()
    {
        await OnSave.InvokeAsync(_html);
    }
}